# -*- coding: utf-8 -*-
"""ML_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11VAfWYVjyk2EtPFUiqdUf3Ci5Fr72e7P

# ML LAB_1 Feature Enginerring

**Mount the Google Drive**
"""

# Mount Google Drive

from google.colab import drive
drive.mount('/content/drive')

"""Import required libraries"""

# Import necessary libraries

import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score

"""Load data from csv files"""

# Define file paths for the datasets
trainData = "/content/drive/MyDrive/MLLAB1/train.csv"
validData = "/content/drive/MyDrive/MLLAB1/valid.csv"
testData = "/content/drive/MyDrive/MLLAB1/test.csv"

# Load data into DataFrames

trainDataFrame = pd.read_csv(trainData)
validDataFrame= pd.read_csv(validData)
testDataFrame = pd.read_csv(testData)

labels = ['label_1', 'label_2', 'label_3', 'label_4']

# Initialize dictionaries to store data

X_train = {}
X_valid = {}
y_train = {}
y_valid = {}
X_test = {}

"""
Splitting the feature data based on different labels."""

# Loop through labels and perform preprocessing
for label in labels:
    scaler = StandardScaler()
    train_df = trainDataFrame
    validate_df = validDataFrame
    test_df = testDataFrame
    if label == 'label_2': # Remove NaN rows for label_2
      train_df = trainDataFrame[trainDataFrame[label].notna()]
      validate_df = validDataFrame[validDataFrame[label].notna()]


    # Standardize features

    X_train[label] = pd.DataFrame(scaler.fit_transform(train_df.iloc[:, :-4]))
    X_valid[label] = pd.DataFrame(scaler.transform(validate_df.iloc[:, :-4]))
    X_test[label] = pd.DataFrame(scaler.transform(test_df.iloc[:, :-4]))

    y_train[label] = train_df[label]
    y_valid[label] = validate_df[label]

X_train['label_1']

"""Using K best for feature selection"""

# Number of new features
new_features = 97
selector = SelectKBest(f_classif, k=new_features)

# Initialize dictionaries for selected features
X_train_selected = {}
X_valid_selected = {}
X_test_selected = {}\

# Loop through labels and perform feature selection

for label in X_train:
  X_train_selected[label] = pd.DataFrame(selector.fit_transform(X_train[label], y_train[label]))
  X_valid_selected[label] = pd.DataFrame(selector.transform(X_valid[label]))
  X_test_selected[label] = pd.DataFrame(selector.transform(X_test[label]))

"""Check selected features"""

X_train_selected['label_1'].shape

"""Suppport Vector Function"""

def support_vector_model(label_name, training_data, validation_data, training_labels, validation_labels):
    if label_name == 'label_2': #for Age
        linear_regressor = LinearRegression()
        linear_regressor.fit(training_data[label_name], training_labels[label_name])
        predictions = linear_regressor.predict(validation_data[label_name])
        print(f"+ MSE for {label_name} = ", mean_squared_error(validation_labels[label_name], predictions))
    else:
        supportVectorMachineClsf = SVC(kernel='linear')
        supportVectorMachineClsf.fit(training_data[label_name], training_labels[label_name])
        labelPredictions = supportVectorMachineClsf.predict(validation_data[label_name])
        print(f"+ Accuracy Score for {label_name} = ", accuracy_score(validation_labels[label_name], labelPredictions))

"""Testing the performance of the initial dataset using evaluation metrics."""

support_vector_model('label_1', X_train, X_valid, y_train, y_valid)
support_vector_model('label_2', X_train, X_valid, y_train, y_valid)
support_vector_model('label_3', X_train, X_valid, y_train, y_valid)
support_vector_model('label_4', X_train, X_valid, y_train, y_valid)

X_train['label_1'].shape

X_train_selected['label_1'].shape

"""Evaluating performance after the process of selecting relevant features"""

support_vector_model('label_1', X_train_selected, X_valid_selected, y_train, y_valid)
support_vector_model('label_2', X_train_selected, X_valid_selected, y_train, y_valid)
support_vector_model('label_3', X_train_selected, X_valid_selected, y_train, y_valid)
support_vector_model('label_4', X_train_selected, X_valid_selected, y_train, y_valid)

"""Label Prediction"""

def svm_test(label_name, training_data, validation_data, training_labels, validation_labels):
    if label_name == 'label_2':
        svm_regressor = LinearRegression()
        svm_regressor.fit(training_data[label_name], training_labels[label_name])
        predictions = svm_regressor.predict(validation_data[label_name])
    else:
        svm_classifier = SVC(kernel='linear')
        svm_classifier.fit(training_data[label_name], training_labels[label_name])
        predictions = svm_classifier.predict(validation_data[label_name])
    return pd.DataFrame(predictions)

y_prediction_l1 = svm_test('label_1', X_train, X_test, y_train, y_valid)
y_prediction_l2 = svm_test('label_2', X_train, X_test, y_train, y_valid)
y_prediction_l3 = svm_test('label_3', X_train, X_test, y_train, y_valid)
y_prediction_l4 = svm_test('label_4', X_train, X_test, y_train, y_valid)

y_prediction_l1

y_prediction_selected_l1 = svm_test('label_1', X_train_selected, X_test_selected, y_train, y_valid)
y_prediction_selected_l2 = svm_test('label_2', X_train_selected, X_test_selected, y_train, y_valid)
y_prediction_selected_l3 = svm_test('label_3', X_train_selected, X_test_selected, y_train, y_valid)
y_prediction_selected_l4 = svm_test('label_4', X_train_selected, X_test_selected, y_train, y_valid)

y_prediction_selected_l1

"""

Create CSV files and add data"""

# Concatenate the DataFrames horizontally

# Convert new_features to a string
new_features_str = str(new_features)

# Create DataFrames for new_features
new_features_df = pd.DataFrame([new_features_str] * len(y_pred_l1))

cn = {}
for i in range(new_features):
  cn[i] = 'new_feature_' + str(i+1)

ncn = [f'new_feature_{i}' for i in range(new_features+1, 257)]
empty_columns = pd.DataFrame(columns=ncn)

labels = ['label_1', 'label_2', 'label_3', 'label_4']
for l in labels:
  X_test_selected[l].rename(columns=cn, inplace=True)
  X_test_selected[l] = pd.concat([X_test_selected[l], empty_columns], axis=1)

result_df = pd.concat([y_prediction_l1, y_prediction_selected_l1, new_features_df, pd.DataFrame(X_test_selected['label_1'])], axis=1)
result_df.columns = ['Predicted labels before feature engineering', 'Predicted labels after feature engineering', 'No of new features'] + list(pd.DataFrame(X_test_selected['label_1']))
result_df.to_csv("/content/drive/MyDrive/MLLAB1/190545H_label_1.csv", index=False)

result_df = pd.concat([y_prediction_l2, y_prediction_selected_l2, new_features_df, pd.DataFrame(X_test_selected['label_2'])], axis=1)
result_df.columns = ['Predicted labels before feature engineering', 'Predicted labels after feature engineering', 'No of new features'] + list(pd.DataFrame(X_test_selected['label_2']))
result_df.to_csv("/content/drive/MyDrive/MLLAB1/190545H_label_2.csv", index=False)

result_df = pd.concat([y_prediction_l3, y_prediction_selected_l3, new_features_df, pd.DataFrame(X_test_selected['label_3'])], axis=1)
result_df.columns = ['Predicted labels before feature engineering', 'Predicted labels after feature engineering', 'No of new features'] + list(pd.DataFrame(X_test_selected['label_3']))
result_df.to_csv("/content/drive/MyDrive/MLLAB1/190545H_label_3.csv", index=False)

result_df = pd.concat([y_prediction_l4, y_prediction_selected_l4, new_features_df, pd.DataFrame(X_test_selected['label_4'])], axis=1)
result_df.columns = ['Predicted labels before feature engineering', 'Predicted labels after feature engineering', 'No of new features'] + list(pd.DataFrame(X_test_selected['label_4']))
result_df.to_csv("/content/drive/MyDrive/MLLAB1/190545H_label_4.csv", index=False)